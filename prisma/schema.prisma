// This Prisma schema models two independent authentication silos (Weokto & Stam)
// with dedicated users, sessions, verification tokens, and OTP registries.
// Both auth flows rely on NextAuth (email magic link + OTP credentials).

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model WeoktoUser {
  id        String           @id @default(cuid())
  pseudo    String?
  lastName  String?
  firstName String?
  birthDate DateTime?
  email     String?          @unique
  createdAt DateTime?        @default(now())

  sessions  WeoktoSession[]
  accounts  WeoktoAccount[]

  @@index([email])
}

model WeoktoSession {
  id           String    @id @default(cuid())
  sessionToken String    @unique
  userId       String
  expires      DateTime
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  userAgent    String?
  ipAddress    String?

  user WeoktoUser @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model WeoktoAccount {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user WeoktoUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model WeoktoVerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())

  @@id([identifier, token])
}

model WeoktoOtpCode {
  id          String   @id @default(cuid())
  email       String
  codeHash    String
  expires     DateTime
  createdAt   DateTime @default(now())
  consumedAt  DateTime?
  attempts    Int      @default(0)
  lastAttempt DateTime?
}

model StamUser {
  id        String          @id @default(cuid())
  pseudo    String?
  lastName  String?
  firstName String?
  birthDate DateTime?
  email     String?         @unique
  createdAt DateTime?       @default(now())

  sessions  StamSession[]
  accounts  StamAccount[]

  @@index([email])
}

model StamSession {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userAgent    String?
  ipAddress    String?

  user StamUser @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model StamAccount {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user StamUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model StamVerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())

  @@id([identifier, token])
}

model StamOtpCode {
  id          String   @id @default(cuid())
  email       String
  codeHash    String
  expires     DateTime
  createdAt   DateTime @default(now())
  consumedAt  DateTime?
  attempts    Int      @default(0)
  lastAttempt DateTime?
}
